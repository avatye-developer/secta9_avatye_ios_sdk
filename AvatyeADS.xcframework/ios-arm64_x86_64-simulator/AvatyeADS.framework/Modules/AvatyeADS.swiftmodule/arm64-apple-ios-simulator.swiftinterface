// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AvatyeADS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class AvatyeADSInit {
  public init()
  public func setting(appId: Swift.String, appSecretKey: Swift.String, appVersion: Swift.String, logLevel: AvatyeADS.LogLevel = .info)
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CustomStringConvertible {
  case debug
  case info
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AvatyeADSLogger {
  public static func debug(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public static func info(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public static func error(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  @objc deinit
}
public struct userSummaryResponse : Swift.Codable {
  public let userID: Swift.String?
  public let appID: Swift.String?
  public let phoneVerified: Swift.Bool?
  public let emailVerified: Swift.Bool?
  public let provider: Swift.String?
  public let providerUserID: Swift.String?
  public let state: Swift.Int?
  public let appUser: AvatyeADS.appUserModel?
  public let ageVerified: Swift.Bool?
  public let terms: AvatyeADS.terms?
  public let userGroupName: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct appUserModel : Swift.Codable {
  public let userID: Swift.String?
  public let appID: Swift.String?
  public let nickname: Swift.String?
  public let gender: Swift.String?
  public let birthDate: Swift.String?
  public let inviteCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct terms : Swift.Codable {
  public let collectPersonalData: AvatyeADS.collectPersonalData?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct collectPersonalData : Swift.Codable {
  public let tye: Swift.Int?
  public let agree: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class AvatyeUtilManager {
  public init()
  public func getUserProfile(userKey: Swift.String, resource: Swift.String? = nil, completion: @escaping (AvatyeADS.PointHomeResultType<AvatyeADS.userSummaryResponse>) -> Swift.Void)
  @objc deinit
}
public enum AvatyeResultType {
  case success
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
  public static func == (a: AvatyeADS.AvatyeResultType, b: AvatyeADS.AvatyeResultType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TokenError : Swift.Error {
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
  public static func == (a: AvatyeADS.TokenError, b: AvatyeADS.TokenError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointHomeResultType<T> {
  case success(T)
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
}
public struct ErrorModel : Swift.Codable {
  public var code: Swift.String?
  public var status: Swift.Int?
  public var message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class TokenUtil {
  public init()
  public func setUserKeyChain(userKey: Swift.String, completion: @escaping (AvatyeADS.AvatyeResultType) -> Swift.Void)
  public func getToken(userKey: Swift.String, completion: @escaping (Swift.Result<Swift.String, AvatyeADS.TokenError>) -> Swift.Void)
  public func deleteToken()
  @objc deinit
}
public enum KeyChainType : Swift.String {
  case userKey
  case pointHomeTokenKey
  case deviceID
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class KeyChainManager {
  public init()
  public func getStringFromKeyChain(type key: AvatyeADS.KeyChainType) throws -> Swift.String
  public func deleteStringFromKeyChain(type key: AvatyeADS.KeyChainType) throws
  @objc deinit
}
extension AvatyeADS.LogLevel : Swift.Equatable {}
extension AvatyeADS.LogLevel : Swift.Hashable {}
extension AvatyeADS.LogLevel : Swift.RawRepresentable {}
extension AvatyeADS.AvatyeResultType : Swift.Equatable {}
extension AvatyeADS.AvatyeResultType : Swift.Hashable {}
extension AvatyeADS.TokenError : Swift.Equatable {}
extension AvatyeADS.TokenError : Swift.Hashable {}
extension AvatyeADS.KeyChainType : Swift.Equatable {}
extension AvatyeADS.KeyChainType : Swift.Hashable {}
extension AvatyeADS.KeyChainType : Swift.RawRepresentable {}
